import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:typed_data';
import 'package:petty_app/core/services/location_service.dart';
import '../../domain/entities/pet_ping.dart';
import '../providers/pet_ping_providers.dart';
import 'package:dropdown_search/dropdown_search.dart';

class PingTestScreen extends ConsumerStatefulWidget {
  const PingTestScreen({super.key});

  @override
  ConsumerState<PingTestScreen> createState() => _PingTestScreenState();
}

class _PingTestScreenState extends ConsumerState<PingTestScreen> {
  final LocationService _locationService = LocationService();
  final TextEditingController _titleController = TextEditingController();
  String? _selectedGender;
  String? _selectedStatus; // 'lost' or 'found'
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _contactInfoController = TextEditingController();
  
  List<PetPing> _nearbyPings = [];
  String? _error;
  bool _isAddingPing = false;
  bool _isRefreshingNearbyPings = false;
  List<Uint8List> _selectedImages = [];
  final _imagePicker = ImagePicker();

  final List<String> petTypes = [
    'Dog', 'Cat', 'Bird', 'Rabbit', 'Hamster', 'Fish', 'Turtle', 'Snake', 'Lizard', 'Horse', 'Ferret', 'Guinea Pig', 'Pig', 'Goat', 'Chicken', 'Duck', 'Other'
  ];

  String? _selectedPetType;

  Future<void> _pickImage() async {
    try {
      final List<XFile> pickedFiles = await _imagePicker.pickMultiImage(
        maxWidth: 800, // Reduced size
        maxHeight: 800, // Reduced size
        imageQuality: 70, // Lower quality for smaller file size
      );
      
      if (pickedFiles.isNotEmpty) {
        for (var file in pickedFiles) {
          final bytes = await file.readAsBytes();
          if (bytes.length > 1024 * 1024) { // Check if larger than 1MB
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Image ${file.name} is too large. Skipping...')),
            );
            continue;
          }
          setState(() {
            _selectedImages.add(bytes);
          });
        }
      }
    } catch (e) {
      print('Error picking images: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error picking images: $e')),
      );
    }
  }

  @override
  void dispose() {
  _titleController.dispose();
    _descriptionController.dispose();
    _contactInfoController.dispose();
    super.dispose();
  }

  Future<void> _addNewPing() async {
  if (_titleController.text.isEmpty ||
    _descriptionController.text.isEmpty ||
    _selectedGender == null ||
    _selectedStatus == null ||
    _selectedPetType == null || _selectedPetType!.isEmpty) {
      setState(() {
        _error = 'Please fill in all fields';
      });
      return;
    }

    setState(() {
      _isAddingPing = true;
      _error = null;
    });

    try {
      final location = await _locationService.getCurrentLocation();
      
      final newPing = PetPing(
        id: '', // Will be generated by Supabase
        title: _titleController.text,
        petType: _selectedPetType ?? '',
        description: _descriptionController.text,
        location: location,
        gender: _selectedGender,
        timestamp: DateTime.now(),
        isLost: _selectedStatus == 'lost',
        images: _selectedImages.isNotEmpty ? _selectedImages : null,
        contactInfo: _contactInfoController.text.isNotEmpty ? _contactInfoController.text : null,
      );

      try {
        print('Attempting to add ping: ${newPing.toJson()}');
        final addedPing = await ref.read(petPingRepositoryProvider).addPetPing(newPing);
        print('Successfully added ping: ${addedPing.toJson()}');
      } catch (e, stackTrace) {
        print('Error adding ping: $e');
        print('Stack trace: $stackTrace');
        rethrow;
      }
      
      // Clear form
      setState(() {
        _titleController.clear();
        _descriptionController.clear();
        _contactInfoController.clear();
        _selectedImages.clear();
        _selectedGender = null;
        _selectedStatus = null;
        _selectedPetType = null;
      });

      // Refresh nearby pings
      _loadNearbyPings();

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Pet ping added successfully!')),
      );
    } catch (e) {
      setState(() {
        _error = 'Error adding ping: $e';
      });
    } finally {
      setState(() {
        _isAddingPing = false;
      });
    }
  }

  Future<void> _loadNearbyPings() async {
    setState(() {
      _isRefreshingNearbyPings = true;
      _error = null;
    });

    try {
      final location = await _locationService.getCurrentLocation();
      final pings = await ref.read(petPingRepositoryProvider).getNearbyPings(location);
      
      if (mounted) {
        setState(() {
          _nearbyPings = pings;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _error = 'Error loading nearby pings: $e';
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isRefreshingNearbyPings = false;
        });
      }
    }
  }

  @override
  void initState() {
    super.initState();
    // Load nearby pings when screen opens
    _loadNearbyPings();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pet Ping Test'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Add new ping form
            TextField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Title (e.g. "Brown dog near park")'),
            ),
            const SizedBox(height: 8),
            DropdownButtonFormField<String>(
              value: _selectedStatus,
              decoration: const InputDecoration(labelText: 'Status'),
              items: const [
                DropdownMenuItem(value: 'lost', child: Text('Lost')),
                DropdownMenuItem(value: 'found', child: Text('Found')),
              ],
              onChanged: (value) {
                setState(() {
                  _selectedStatus = value;
                });
              },
            ),
            const SizedBox(height: 8),
            DropdownButtonFormField<String>(
              value: _selectedGender,
              decoration: const InputDecoration(labelText: 'Gender'),
              items: const [
                DropdownMenuItem(value: 'male', child: Text('Male')),
                DropdownMenuItem(value: 'female', child: Text('Female')),
              ],
              onChanged: (value) {
                setState(() {
                  _selectedGender = value;
                });
              },
            ),
            const SizedBox(height: 8),
            DropdownSearch<String>(
              items: (filter, infiniteScrollProps) => petTypes,
              selectedItem: _selectedPetType,
              decoratorProps: const DropDownDecoratorProps(
                decoration: InputDecoration(
                  labelText: "Pet Type",
                  border: OutlineInputBorder(),
                ),
              ),
              onChanged: (value) {
                setState(() {
                  _selectedPetType = value;
                });
              },
              popupProps: PopupProps.bottomSheet(
                showSelectedItems: true,
                showSearchBox: true,
                searchFieldProps: const TextFieldProps(
                  decoration: InputDecoration(
                    hintText: "Search pet type...",
                    prefixIcon: Icon(Icons.search),
                  ),
                ),
                bottomSheetProps: const BottomSheetProps(
                  elevation: 16,
                  backgroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Description'),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _contactInfoController,
              decoration: const InputDecoration(labelText: 'Contact Information (Optional)'),
            ),
            const SizedBox(height: 16),
            // Image picker section
            Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                ElevatedButton.icon(
                  onPressed: (_isAddingPing || _isRefreshingNearbyPings) ? null : _pickImage,
                  icon: const Icon(Icons.photo_camera),
                  label: const Text('Add Photos'),
                ),
                if (_selectedImages.isNotEmpty) ...[
                  const SizedBox(height: 8),
                  SizedBox(
                    height: 150,
                    child: ListView.builder(
                      scrollDirection: Axis.horizontal,
                      itemCount: _selectedImages.length,
                      itemBuilder: (context, index) {
                        return Padding(
                          padding: const EdgeInsets.only(right: 8),
                          child: Stack(
                            children: [
                              ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image.memory(
                                  _selectedImages[index],
                                  height: 150,
                                  width: 150,
                                  fit: BoxFit.cover,
                                ),
                              ),
                              Positioned(
                                top: 4,
                                right: 4,
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      _selectedImages.removeAt(index);
                                    });
                                  },
                                  child: Container(
                                    padding: const EdgeInsets.all(4),
                                    decoration: BoxDecoration(
                                      color: Colors.black.withOpacity(0.5),
                                      shape: BoxShape.circle,
                                    ),
                                    child: const Icon(
                                      Icons.close,
                                      color: Colors.white,
                                      size: 16,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ],
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _isAddingPing ? null : _addNewPing,
              child: _isAddingPing
                  ? const CircularProgressIndicator()
                  : const Text('Add Pet Ping'),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _isRefreshingNearbyPings ? null : _loadNearbyPings,
              child: _isRefreshingNearbyPings
                  ? const CircularProgressIndicator()
                  : const Text('Refresh Nearby Pings'),
            ),
            if (_error != null) ...[
              const SizedBox(height: 16),
              Text(
                _error!,
                style: const TextStyle(color: Colors.red),
              ),
            ],
            const SizedBox(height: 24),
            const Text(
              'Nearby Pings:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ..._nearbyPings.map((ping) => Card(
              margin: const EdgeInsets.only(bottom: 8),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                      Text(
                        ping.title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    Text('Type: ${ping.petType}'),
                    Text('Description: ${ping.description}'),
                    Text(
                      'Location: ${ping.location.latitude}, ${ping.location.longitude}',
                    ),
                    Text(
                      'Status: ${ping.isLost ? "Lost" : "Found"}',
                      style: TextStyle(
                        color: ping.isLost ? Colors.red : Colors.green,
                      ),
                    ),
                    if (ping.images?.isNotEmpty ?? false) ...[
                      const SizedBox(height: 8),
                      SizedBox(
                        height: 100,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: ping.images!.length,
                          itemBuilder: (context, index) {
                            return Padding(
                              padding: const EdgeInsets.only(right: 8),
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(8),
                                child: Image.memory(
                                  ping.images![index],
                                  height: 100,
                                  width: 100,
                                  fit: BoxFit.cover,
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            )).toList(),
          ],
        ),
      ),
    );
  }
}