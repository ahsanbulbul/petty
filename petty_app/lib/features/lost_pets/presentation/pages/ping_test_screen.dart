import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:typed_data';
import 'package:petty_app/core/services/location_service.dart';
import '../../domain/entities/pet_ping.dart';
import '../providers/pet_ping_providers.dart';

class PingTestScreen extends ConsumerStatefulWidget {
  const PingTestScreen({super.key});

  @override
  ConsumerState<PingTestScreen> createState() => _PingTestScreenState();
}

class _PingTestScreenState extends ConsumerState<PingTestScreen> {
  final LocationService _locationService = LocationService();
  final TextEditingController _petNameController = TextEditingController();
  final TextEditingController _petTypeController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _contactInfoController = TextEditingController();
  
  List<PetPing> _nearbyPings = [];
  String? _error;
  bool _isLoading = false;
  Uint8List? _selectedImage;
  final _imagePicker = ImagePicker();

  Future<void> _pickImage() async {
    try {
      final XFile? pickedFile = await _imagePicker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 800, // Reduced size
        maxHeight: 800, // Reduced size
        imageQuality: 70, // Lower quality for smaller file size
      );
      
      if (pickedFile != null) {
        final bytes = await pickedFile.readAsBytes();
        if (bytes.length > 1024 * 1024) { // Check if larger than 1MB
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Image is too large. Please choose a smaller image.')),
          );
          return;
        }
        setState(() => _selectedImage = bytes);
      }
    } catch (e) {
      print('Error picking image: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error picking image: $e')),
      );
    }
  }

  @override
  void dispose() {
    _petNameController.dispose();
    _petTypeController.dispose();
    _descriptionController.dispose();
    _contactInfoController.dispose();
    super.dispose();
  }

  Future<void> _addNewPing() async {
    if (_petNameController.text.isEmpty ||
        _petTypeController.text.isEmpty ||
        _descriptionController.text.isEmpty) {
      setState(() {
        _error = 'Please fill in all fields';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final location = await _locationService.getCurrentLocation();
      
      final newPing = PetPing(
        id: '', // Will be generated by Supabase
        petName: _petNameController.text,
        petType: _petTypeController.text,
        description: _descriptionController.text,
        location: location,
        timestamp: DateTime.now(),
        isLost: true,
        imageData: _selectedImage,
        contactInfo: _contactInfoController.text.isNotEmpty ? _contactInfoController.text : null,
      );

      try {
        print('Attempting to add ping: ${newPing.toJson()}');
        final addedPing = await ref.read(petPingRepositoryProvider).addPetPing(newPing);
        print('Successfully added ping: ${addedPing.toJson()}');
      } catch (e, stackTrace) {
        print('Error adding ping: $e');
        print('Stack trace: $stackTrace');
        rethrow;
      }
      
      // Clear form
      setState(() {
        _petNameController.clear();
        _petTypeController.clear();
        _descriptionController.clear();
        _contactInfoController.clear();
        _selectedImage = null;
      });

      // Refresh nearby pings
      _loadNearbyPings();

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Pet ping added successfully!')),
      );
    } catch (e) {
      setState(() {
        _error = 'Error adding ping: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _loadNearbyPings() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final location = await _locationService.getCurrentLocation();
      final pings = await ref.read(petPingRepositoryProvider).getNearbyPings(location);
      
      setState(() {
        _nearbyPings = pings;
      });
    } catch (e) {
      setState(() {
        _error = 'Error loading nearby pings: $e';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    // Load nearby pings when screen opens
    _loadNearbyPings();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Pet Ping Test'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Add new ping form
            TextField(
              controller: _petNameController,
              decoration: const InputDecoration(labelText: 'Pet Name'),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _petTypeController,
              decoration: const InputDecoration(labelText: 'Pet Type'),
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _descriptionController,
              decoration: const InputDecoration(labelText: 'Description'),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _contactInfoController,
              decoration: const InputDecoration(labelText: 'Contact Information (Optional)'),
            ),
            const SizedBox(height: 16),
            // Image picker section
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      ElevatedButton.icon(
                        onPressed: _isLoading ? null : _pickImage,
                        icon: const Icon(Icons.photo_camera),
                        label: const Text('Add Photo'),
                      ),
                      if (_selectedImage != null) ...[
                        const SizedBox(height: 8),
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.memory(
                            _selectedImage!,
                            height: 150,
                            width: double.infinity,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _isLoading ? null : _addNewPing,
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : const Text('Add Pet Ping'),
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _isLoading ? null : _loadNearbyPings,
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : const Text('Refresh Nearby Pings'),
            ),
            if (_error != null) ...[
              const SizedBox(height: 16),
              Text(
                _error!,
                style: const TextStyle(color: Colors.red),
              ),
            ],
            const SizedBox(height: 24),
            const Text(
              'Nearby Pings:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            ..._nearbyPings.map((ping) => Card(
              margin: const EdgeInsets.only(bottom: 8),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      ping.petName,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text('Type: ${ping.petType}'),
                    Text('Description: ${ping.description}'),
                    Text(
                      'Location: ${ping.location.latitude}, ${ping.location.longitude}',
                    ),
                    Text(
                      'Status: ${ping.isLost ? "Lost" : "Found"}',
                      style: TextStyle(
                        color: ping.isLost ? Colors.red : Colors.green,
                      ),
                    ),
                  ],
                ),
              ),
            )).toList(),
          ],
        ),
      ),
    );
  }
}